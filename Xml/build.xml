<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="build2" basedir="../.">
 <!-- By default, we assume all tools to be on the $PATH -->
 <property name="pdepend" value="pdepend"/>
 <property name="phpcpd"  value="phpcpd"/>
 <property name="phpcs"   value="phpcs"/>
 <property name="phpdox"  value="phpdox"/>
 <property name="phploc"  value="phploc"/>
 <property name="phpmd"   value="phpmd"/>
 <property name="phpunit" value="phpunit"/>
 
 <target name="printinfo">
  <property environment="env" />
  <echo message="env.$PATH"/>
 </target>

 <target name="build2"
         depends="prepare,phpunit,phpcs"
         description="Performs static analysis, runs the tests, and generates project documentation"/>

 <target name="build1"
         depends="printinfo,prepare,static-analysis,phpunit"
         description="Performs static analysis, runs the tests, and generates project documentation"/>
 
 <target name="full-build"
         depends="printinfo,prepare,static-analysis,phpunit,phpdox,-check-failure"
         description="Performs static analysis, runs the tests, and generates project documentation"/>

 <target name="quick-build"
         depends="prepare,lint,phpunit-no-coverage"
         description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

 <target name="static-analysis"
         depends="lint,phploc-ci,pdepend,phpmd-ci"
         description="Performs static analysis" />

 <target name="static-analysis1"
         depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
         description="Performs static analysis" />

 <target name="clean"
         unless="clean.done"
         description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phpdox"/>
  <property name="clean.done" value="true"/>
 </target>

 <target name="prepare"
         unless="prepare.done"
         depends="clean"
         description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/phpdox"/>
  <property name="prepare.done" value="true"/>
 </target>
 
 <target name="lint"
         unless="lint.done"
         description="Perform syntax check of sourcecode files">
  <apply executable="php" taskname="lint">
   <arg value="-l" />

   <fileset dir="${basedir}/Mod">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/View">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/Class">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/Inc">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/Php">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/Tests">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>

  <property name="lint.done" value="true"/>
 </target>

 <!--target name="phploc"
         unless="phploc.done"
         description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="- -count-tests" />
   <arg path="${basedir}/Php" />
   <arg path="${basedir}/Tests" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target-->
 
 <target name="phploc-ci"
	     depends="prepare"
	     description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phploc --count-tests --log-csv ${basedir}/build/logs/phploc.csv --log-xml ${basedir}/build/logs/phploc.xml ${basedir}/Php ${basedir}/Tests" />
  </exec>
 </target>
 
 <target name="phploc-ci1"
         unless="phploc.done"
         depends="prepare"
         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phploc}" taskname="phploc">
   <arg value="--count-tests" />
   <arg value="--log-csv" />
   <arg path="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg path="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/Tests" />
  </exec>

  <property name="phploc.done" value="true"/>
 </target>

 <target name="pdepend"
	     depends="prepare"
	     description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c pdepend --jdepend-xml=${basedir}/build/logs/jdepend.xml --jdepend-chart=${basedir}/build/pdepend/dependencies.svg --overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
  </exec>
 </target>

 <target name="pdepend1"
         unless="pdepend.done"
         depends="prepare"
         description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${pdepend}" taskname="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/src" />
  </exec>

  <property name="pdepend.done" value="true"/>
 </target>

 <target name="phpmd1"
         unless="phpmd.done"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${basedir}/src" />
   <arg value="text" />
   <arg path="${basedir}/build/phpmd.xml" />
  </exec>
 
  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpmd"
	     depends="prepare"
	     description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phpmd ${basedir}/Php xml codesize --reportfile ${basedir}/build/phpmd.xml" />
  </exec>
 </target>

 <!-- target name="phpmd-ci"
	     depends="prepare"
	     description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phpmd ${basedir}/Php xml ${basedir}/build/phpmd.xml - -reportfile ${basedir}/build/logs/pmd.xml" />
  </exec>
 </target -->

 <target name="phpmd-ci"
		 depends="prepare"
		 description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phpmd ${basedir}/Php xml ${basedir}/build/phpmd.xml - -reportfile ${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci1"
         unless="phpmd.done"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpmd}" taskname="phpmd">
   <arg path="${basedir}/src" />
   <arg value="xml" />
   <arg path="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg path="${basedir}/build/logs/pmd.xml" />
  </exec>

  <property name="phpmd.done" value="true"/>
 </target>

 <target name="phpcs"
		 depends="prepare"
		 description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phcs ${basedir}/Php --report=checkstyle --report-file=${basedir}/build/logs/checkstyle.xml ${basedir}/Php ${basedir}/Tests" />
  </exec>
 </target>

 <target name="phpcs2"
         unless="phpcs.done"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcs}" taskname="phpcs">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/Tests" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcs-ci"
         unless="phpcs.done"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/src" />
   <arg path="${basedir}/Tests" />
  </exec>

  <property name="phpcs.done" value="true"/>
 </target>

 <target name="phpcpd"
         unless="phpcpd.done"
         description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg path="${basedir}/src" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpcpd-ci"
         unless="phpcpd.done"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${phpcpd}" taskname="phpcpd">
   <arg value="--log-pmd" />
   <arg path="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/src" />
  </exec>

  <property name="phpcpd.done" value="true"/>
 </target>

 <target name="phpunit"
	     depends="clean"
	     description="Run unit tests with PHPUnit">
  <exec executable="cmd">
   <arg line="/c phpunit -c '${basedir}/Xml/phpunit.xml'" />
  </exec>
 </target>

 <!-- target name="phpunit"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit Tests with PHPUnit">
  <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
   <arg value="- -configuration"/>
   <arg path="${basedir}/build/phpunit.xml"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target -->

 <target name="phpunit-no-coverage"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit (without generating code coverage reports)">
  <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
   <arg value="--configuration"/>
   <arg path="${basedir}/build/phpunit.xml"/>
   <arg value="--no-coverage"/>
  </exec>

  <property name="phpunit.done" value="true"/>
 </target>

 <target name="phpdox"
         unless="phpdox.done"
         depends="phploc-ci,phpcs-ci,phpmd-ci"
         description="Generate project documentation using phpDox">
  <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox"/>

  <property name="phpdox.done" value="true"/>
 </target>

 <target name="-check-failure">
  <fail message="PHPUnit did not finish successfully">
   <condition>
    <not>
     <equals arg1="${result.phpunit}" arg2="0"/>
    </not>
   </condition>
  </fail>
 </target>
</project>
